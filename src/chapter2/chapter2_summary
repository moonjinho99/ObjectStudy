📚 객체지향 프로그래밍

📗 협력, 객체, 클래스
객체지향 프로그래밍 시에는 객체에 초점을 맞줘야 한다.
1)	어떤 클래스가 필요한지 고민하기 전에 어떤 객체들이 필요한지 고민하라
2)	객체는 독립적인 존재가 아니라 기능을 구현하기 위해 협력하는 공동체의 일원으로 봐야  한다

📗	도메인의 구조를 따르는 프로그램 구조
-	도메인(domain) : 문제를 해결하기 위해 사용자가 프로그램을 사용하는 분야
-	요구사항과 프로그램을 객체라는 동일한 관점에서 바라볼 수 있기 때문에 도메인을 구성하는 개념들이 프로그램의 객체와 클래스로 매끄럽게 연결될 수 있다

📗	클래스 구현
✏️	Screening
-	변수의 가시성은 private , 메서드의 가시성은 public
-	훌륭한 클래스 설계의 핵심은 어떤 부분을 외부 공개하고, 어떤 부분을 감출지를 결정하는 것
-	클래스의 내부와 외부를 구분  객체의 자율성과 프로그래머에게 구현의 자유를 제공

✏️	자율적인 객체
-	객체는 상태와 행동을 함께 가지는 복합적인 존재
-	객체는 스스로 판단하고 행동하는 자율적인 존재

✏️	프로그래머의 자유
-	프로그래머의 역할을 클래스 작성자, 클라이언트 프로그래머로 구분짓는 것이 유용
-	클래스 작성자 : 새로운 데이터 타입을 프로그램에 추가
-	클라이언트 프로그래머 : 클래스 작성자가 추가한 데이터 타입을 사용
-	객체의 외부와 내부를 구분하면 클라이언트 프로그래머가 알아야 할 지식의 양은 줄어들고, 클래스 작성자가 자유롭게 구현을 변경할 수 있는 폭이 넓어짐

✏️	Money
-	하나의 인스턴스 변수만 포함하더라도 개념을 명시적으로 표현하는 것은 전체적인 설계의 명확성과 유연성을 높일 수 있다

✏️	Movie
-	기본요금은 fee를 받아서 할인 요금을 차감하는 클래스
-	하지만 할인 정책을 판별하는 코드가 없다

✏️	DiscountPolicy
-	할인 정책은 금액 할인 정책과 비율 할인 정책으로 구분되는데 두 클래스를 만들 것 이다.
-	두 클래스는 대부분의 코드가 유사하고 할인요금을 계산하는 방식만 조금 다르기 때문에 공통 코드를 보관하는 DiscountPolicy 클래스 만들어서 상속 받아 구현할 것이다.
-	실제 애플리케이션에서는 DiscountPolicy의 인스턴스를 생성할 필요가 없기 때문에 추상 클래스로 구현

✏️	DiscountCondition
-	isSatisfiedBy는 할인이 가능한 경우 true, 불가능한 경우에는 false를 반환
-	영화 예매 시스템에는 순번 조건과 기간 조건의 두 가지 할인 조건이 존재하므로 두 개의 클래스로 구현할 것

✏️	SequenceCondition
-	할인 여부를 판단하기 위해 사용할 순번(sequence)을 인스턴스 변수로 포함
-	파라미터로 전달된 Screening의 상영 순번과 일치할 경우 true, 그렇지 않으면 false반환

✏️	PeriodCondition
-	상영시간이 특정 시간에 포함되는지 여부 판단

✏️	AmountDiscountPolicy
-	금액 할인 정책

✏️	PercentDiscountPolicy
-	비율 할인 정책

📗	상속과 다형성
✏️	컴파일 시간 의존성과 실행 시간 의존성
-	코드의 의존성과 실행 시간의 의존성이 다르면 다를수록 코드를 이해하기 어렵지만, 코드는 더 유연해지고 확장이 가능해진다

📗	차이에 의한 프로그래밍
-	추가하는 클래스가 기존의 클래스와 매우 유사하다면 약간 수정하거나 추가해서 생성할 수 있음, 더 좋은 방법은 코드를 재사용하는 것  상속
-	부모 클래스와 다른 부분만을 추가해서 새로운 클래스를 쉽고 빠르게 만드는 방법을 차이에 의한 프로그래밍이라고 부름

📗	상속과 인터페이스
-	업캐스팅 : 자식 클래스가 부모 클래스를 대신하는 것

📗	다형성
-	메시지와 메서드의 차이 
-	객체간의 상호작용 하는 방법을 메시지라 하고, 수신된 메시지를 처리하는 방법을 메서드라고 한다.
-	Movie는 DiscountPolicy의 인스턴스에 claculateDiscountAmount 메시지를 전송
-	Movie와 협력하는 객체가 AmountDiscountPolicy 이거나 PercentDiscountPolicy 인지에 따라 각자 오버라이딩된 메서드가 실행된다.
-	컴파일 시간 의존성 : Movie  DiscountPolicy
-	실행 시간 의존성 : Movie  AmountDiscountPolicy, PercentDiscountPolicy 
-	다형성은 메시지 수신시 메시지에 응답하기 위해 실행될 메서드를 실행 시점에 결정한다는 특징이 있다.
-	이를 지연 바인딩(lazy binding) 또는 동적 바인딩(dynamic binding)이라고 부른다
-	컴파일 시점에 실행될 함수나 프로시저를 결정하는 것을 초기 바인딩(early binding) 또는 정적 바인딩(static binding)이라고 부른다

📗	추상화의 힘
-	추상화의 계층만 따로 떼어 놓고 보면 요구사항의 정책을 높은 수준에서 서술할 수 있다
-	추상화를 이용하면 설계가 좀 더 유연해진다

📗	유연한 설계
-	책임의 위치를 결정하기 위해 조건문을 사용하는 것은 좋지 않은 선택
-	0원이라는 할인 요금 계산을 DiscountPolicy 계층에 유지하기 위해 NoneDiscountPolicy를 추가한다

📗	추상 클래스와 인터페이스 트레이오프
-	DiscountPolicy는 할인 조건이 없으면 getDiscountAmount()를 호출하지 않기 떄문에 NoneDiscountPolicy의 getDiscountAmount() 메서드가 어떤 값을 반환해도 의미가 없다.
-	DiscountPolicy -> 인터페이스로 변경
-	추상 클래스였던 DiscountPolicy -> DefaultDiscountPolicy로 변경

📗 코드 재사용
-	코드 재사용을 위해서는 상속보다는 합성(composition)이 좋은 방법
-	합성 : 다른 객체의 인스턴스를 자신의 인스턴스 변수로 포함해서 재사용하는 방법

📗	코드 재사용에 상속 대신 합성을 선호하는 이유?
-	상속은 두 가지 관점에서 안좋은 영향을 미친다
-	캡슐화 위반과 설계를 유연하지 못하게 만든다는 점
 
-	상속을 이용하기 위해서는 부모 클래스의 내부 구조를 잘 알고 있어야하기 때문에 부모클래스의 구현이 자식 클래스에게 노출되기 때문에 캡슐화가 약화
-	상속은 부모 클래스와 자식 클래스의 관계를 컴파일 시점에서 결정하기 때문에 실행 시점에서 객체의 종류를 변경할 수 없다.

📗	합성
-	합성은 상속이 가진 두 가지 문제점을 모두 해결한다.
-	인터페이스에서 정의된 메시지를 통해서만 재사용이 가능하기 때문에 구현을 효과적으로 캡슐화 할 수 있다.
-	의존하는 인스턴스를 교체하는 것이 비교적 쉽기 때문에 설계를 유연하게 만든다.

** 코드를 재사용하기 위해서는 합성이 좋지만, 다형성을 위해 인터페이스를 재사용하는 경우에는 상속과 합성을 조합해서 사용할 수 밖에 없다. **
