1.	객체, 설계
	모듈 : 크기와 상관없이 프로그램을 구성하는 임의의 요소
-	소프트웨어 모듈의 목적
1)	실행 중에 제대로 동작
2)	변경을 위해 존재 – 생명주기가 간단하기 때문에 간단한 작업만으로 변경이 가능해야함
3)	코드를 읽는 사람과의 의사소통

[예제 코드의 특징]
	필요한 기능을 오류 없이 정확하게 수행
	변경 용이성과 의사소통의 목적은 만족하지 않는다

	예상을 빗나가는 코드
-	Theater 클래스의 enter의 기능 : 소극장이 관람객의 가방을 열어 초대장을 확인하고 이에 따라 판매원이 티켓과 현금을 옮긴다.
-	관람객이 판매원이 소극장의 통제를 받는 수동적인 존재라는 문제
-	현실에서는 관람객이 본인의 가방에서 직접 초대장을 꺼내거나 돈을 지불하고, 판매원은 매표소에서 티켓을 직접 꺼내 관람객에게 건네고 돈을 직접 받아 매표소에 지불한다.

	변경에 취약한 코드
-	Audience와 TicketSeller를 변경할 경우 Theater도 함께 변경해야 함
-	관람객이 가방을 들고 있다는 가정이 바뀐다면, Audience에서 Bag을 제거하고, Theater의 enter도 수정해야한다.
-	이러한 문제점은 객체 사이의 의존성(dependency)과 관련된 문제다.

	목표
-	애플리케이션의 기능을 구현하는 데 필요한 최소한의 의존성만 유지하고 불필요한 의존성을 제거하는 것
-	객체 사이의 의존성이 과한 경우를 결합도(Coupling)가 높다고 말한다.
-	객체 설계의 목표는 객체 사이의 결합도를 낮춰 변경이 용이한 설계를 만드는 것

[설계 개선하기]
-	Theater가 Audience와 TicketSeller애 관해 너무 세세한 부분까지 알지 못하도록 정보를 차단  관람객과 판매원을 자율적인 존재로 만들자
-	
1.	Theater의 초대장 확인 로직 TicketSeller로 이동
-	TicketOffice에 접근할 수 있는 클래스는 TicketSeller만 가능하고, Theater는 TicketSeller의 sellTo 메시지를 이해하고 응답하는지만 알 수 있음
	Theater에서 TicketOffice로의 의존성이 제거되었다

2.	Audience 캡슐화 개선
-	TicketSeller의 가방안의 초대장 확인 여부 로직을 Audience로 이동
-	Bag은 private로 선언되어 있으므로 관람객을 제외한 다른 객체들은 Bag에 접근할 수 없게된다
-	Audience의 구현을 수정하더라도 TicketSeller에는 영향을 미치지 않는다.
	TicketSeller와 Audience 사이의 결합도가 낮아졌다

***TicketSeller와 Audience가 내부 구현을 외부로 노출시키지 않고 스스로 해결한다  자율적인 존재가 됨***

	캡슐화와 응집도
-	객체 내부의 상태를 캡슐화하고 객체 간에 오직 메시지를 통해서만 상호작용하도록 만드는 것
-	응집도가 높다 : 밀접하게 연관된 작업만을 수행하고 연관성 없는 작업은 다른 객체에게 위임
-	응집도를 높이기 위해서는 스스로 자신의 데이터를 책임

	절차지향과 객체지향
	before의 코드
-	절차지향 프로그래밍(Procedural Programming)
-	Theater의 enter 메소드  프로세스
-	Audience, TicketSeller, TicketOffice, Bag  데이터
-	Theater가 모든 클래스에 의존하고 있다
-	변경하고 이해하기가 어려운 코드

	after의 코드
-	객체지향 프로그래밍(Object-Oriented Programming)
-	프로세스의 적절한 단계를 Audience와 TicketSeller로 이동
-	데이터와 프로세스가 동일한 모듈 내부에 위치

*** 결합도를 낮추기 위해 캡슐화를 진행, 그로 인해 자율성이 높아지고 응집도 높은 객체들의 공동체가 창조됨  휼륭한 객체지향 설계란 결합도를 낮추고 응집도를 높이는  것 ***

[더 개선하기]
	Bag과 TicketOffice에도 자율성을 부여하자
-	Audience의 초대장 확인 및 티켓 처리 로직을 Bag의 내부로 이동 후 캡슐화 하여 메소드로만 확인
-	TicketSeller의 금액처리 로직을 TicketOffice의 내부로 이동 후 캡슐화 하여 메소드로만 확인
	Bag과 TicketOffice에 자율성은 부여되었지만 Audience와 TicketOffice 사이의 새로운 의존성이 추가되었다  전체적인 설계의 결합도 상승  트레이오프의 시점
1)	설계하는 방법은 한 가지 이상일 수 도 있다
2)	모든 사람을 만족시킬 수 있는 설계를 만들 수 는 없다

	의인화
-	현실세계에서는 가방, 소극장, 매표소는 수동적인 존재이지만 위의 설계에서는 자율성을 부여함  객체지향의 세계에서는 모든 것이 능동적이고 자율적인 존재로 바뀐다는 것을 의인화 라고함
*** 정리 : 변경에 유용하며 이해하기 쉽고 객체사이의 의존성을 적절하게 관리하는 것이 훌륭한 객체 지향 설계이다. ***
